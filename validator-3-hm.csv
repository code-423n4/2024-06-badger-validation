issue,title,validator comment,grade,root cause (URL),size
findings-11,Price manipulation in the DEX,Inadequate coded POC alleging the exploit,Unsatisfactory,,68
findings-12,openCdpï¼ŒadjustCdp Sliding point control may fail,Devoid of coded POC alleging flaw on the intended design,Unsatisfactory,,188
findings-14,Staking ETH incorrectly assumes revert bubbling,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,190
findings-3,Both routers don't support third party delegating operations on CDP,Devoid of coded POC alleging flaw on the intended design,Unsatisfactory,,107
findings-7,Main variables - Position manager allows needs to be revoked after each operation can be bypassed,Permit leak. Same root cause as in #54,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-zap-router/src/ZapRouterBase.sol#L115-L133,113
findings-8,Incorrect collateral calculation,Insufficient proof alleging the flaw,Unsatisfactory,,28
findings-9,"ZapRouter Contract Can Retain Tokens, Breaking Invariant",Low QA user input mistake,Unsatisfactory,,90
validation-10,no check that `_stETHDiff` is greater than zero  ,Unlikely. _stETHDiff of type unit256 will revert if ever happens,Unsatisfactory,,30
validation-100,ZapRouterBase::_depositRawEthIntoLido Lacks Proper Validation Checks for Low-Level call,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,79
validation-101,Unchecked Low-Level Call in _depositRawEthIntoLido Function,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,43
validation-102,Malicious actors can donate steth temporarily to Sandwich and MEV swaps through the router,Commonly known issue in DEX on an intended design,Unsatisfactory,,207
validation-103,Lack of Slippage Protection in Token Swaps,It's implemented in LeverageZapRouterBase::_getSwapOperations,Unsatisfactory,,67
validation-104,Improper CDP Borrower Address Handling in `_openCdpCallback` Function,"Missing borrower address applicable to the internal _openCdp(), NOT the external openCdp()",Unsatisfactory,,85
validation-105,Flash Loan Transaction Might Always End up Reverting Due to An Assumption That The Receiver Has Already Set The Necessary Approval,Insufficient proof alleging the flaw,Unsatisfactory,,114
validation-106,ERC20 tokens with no return value will fail to transfer,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,61
validation-107,Unchecked .call() Low-Level Function Result,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,164
validation-108,Reverting all actions,Could be ready DoS if willSweep were immutably set true ,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-protocol/packages/contracts/contracts/LeverageMacroBase.sol#L241,50
validation-109,Inconsistent Collateral Assignment in `openCdpWithWstEth` Function Allows Under-Collateralized CDP Creation,That's the leveraged amount needed,Unsatisfactory,,305
validation-11,lack checks `_stETHReiceived`,Unlikely. _stETHReceived of type unit256 will revert if ever happens,Unsatisfactory,,35
validation-110,ETH Lockup Due to Lack of Error Handling in EbtcLeverageZapRouter Contract,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,62
validation-111,Failure in ETH to stETH Conversion Without User Feedback in EbtcLeverageZapRouter Contract,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,55
validation-112,Unintended Swap Failures Leading to  DoS in `_doSwapChecks` Function,Low inconsequential,Unsatisfactory,,70
validation-113,Incorrect Comparison Logic in Post-Operation Checks,Insufficient proof alleging the flaw as it's in #75,Unsatisfactory,,73
validation-114,"Position Manager Permit Not Revoked After Operations, Compromising CDP Security",borrowerOperations.renouncePositionManagerApproval(msg.sender) is invoked in EbtcLeverageZapRouter.sol,Unsatisfactory,,57
validation-115,Unchecked return value of the low-level call() in `_depositRawEthIntoLido` .,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,53
validation-116,Insufficient Collateral Transfer Check in _getAdjustCdpParams,Incorrect assumptions. Collateral already transferred in by the caller when opening cdp,Unsatisfactory,,363
validation-117,Fixed Hash Value in LeverageMacroBase contract,Commonly known issue,Unsatisfactory,,83
validation-118,Unchecked ETH Transfer in _depositRawEthIntoLido Function,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,40
validation-12,`doOperation` Marked External But Always Reverts,Intended design. The internal function from macro will be used,Unsatisfactory,,47
validation-120,Deposit success on Lido is not checked which could lead to unexpected behavior,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,57
validation-121,The contract does not sweep potential remaining stETH tokens,It will happen in ZapRouterBase::_transferStEthToCaller,Unsatisfactory,,109
validation-122,Adjusting a CDP allows a user to reduce their collateral under the threshold enforced by the protocol,Could be illiquid,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/main/ebtc-zap-router/src/EbtcLeverageZapRouter.sol#L403-L467,93
validation-123,"In the _doSwapChecks function, the comparison between the number of tokens received and expectedMinOut should use >=",Low inconsequential,Unsatisfactory,,57
validation-124,Users can re-enter Router through DEX to reduce the cost of flash loan from BorrowerOperations,Devoid of coded POC showcasing an actual scenario,Unsatisfactory,,57
validation-125,The condition check for parameters in the _getPostCheckParams function is reversed,Reverse condition wrongly used,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-zap-router/src/LeverageZapRouterBase.sol#L269,161
validation-126,Wrong judgment causes the user's check to not work,Reverse condition wrongly used,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-zap-router/src/LeverageZapRouterBase.sol#L269,39
validation-127,Not real closing cdp,Insufficient proof alleging the flaw,Unsatisfactory,,39
validation-128,The router may not be able to operate due to insufficient funds.,Insufficient proof alleging the flaw,Unsatisfactory,,31
validation-129,"Protocol or Users won't be eligible for Lido's referral rewards for depositing ETH, as the referral account is not properly set.",An opportunity loss the protocol is already aware of,Unsatisfactory,,35
validation-13, Add Require Statement to Handle Potential Failures in _depositRawEthIntoLido Function,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,32
validation-130,Unlocked Pragma,Low QA frequently reported by the bots,Unsatisfactory,,39
validation-131,If Lido eth deposit reverts all users deposited Eth  will be locked in smart contract,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,66
validation-132,Misalignment in Borrower Assignment when Opening CDP,Intended design,Unsatisfactory,,117
validation-133,`excessivelySafeCall` will not work with protocol that returns err-code instead of reverting,Insufficient proof alleging the flaw,Unsatisfactory,,54
validation-134,[M-1] If any eBTC or stETH are accidentally locked the first user to openCDP will gain all of them ,Intended design to the lucky user,Unsatisfactory,,74
validation-136,USER CAN INFLATE HIS COLLATERAL  SHARES TO STEAL PROTOCOL AND OTHER USER SHARES OR EVEN DOS THE PROTOCOL,Devoid of coded POC showcasing an actual scenario,Unsatisfactory,,105
validation-137,Use call instead of transfer,This isn't native ETH transfer,Unsatisfactory,,62
validation-138,[H-2] Missing validation for `TradeData`,Insufficient proof alleging the flaw,Unsatisfactory,,36
validation-142,Unchecked return value from low-level `call()`,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,25
validation-143,"`_convertWrappedEthToStETH` of `ZapRouterBase` is mathematically incorrect, can potentially break the functionality of protocol",Insufficient proof. Workinga as intended,Unsatisfactory,,89
validation-144,"`_depositRawEthIntoLido` doesn't check for after - before balance, can lead to first depositor vulnerability",stEth.balanceOf(address(this)) is balAfter,Unsatisfactory,,58
validation-145,Unsafe Ether Deposit Using Low-Level call in _depositRawEthIntoLido function,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,45
validation-146,`LeverageMacroBase::_doOperation` will revert if `willSweep` is set to true,Could be ready DoS if willSweep were immutably set true. Impractical mitigation suggested though,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-protocol/packages/contracts/contracts/LeverageMacroBase.sol#L241,238
validation-148,Position Manager Permit Not Consistently Revoked After Operations,borrowerOperations.renouncePositionManagerApproval(msg.sender) is invoked in EbtcLeverageZapRouter.sol,Unsatisfactory,,71
validation-149,Incorrect comparison logic in `_doCheckValueType` leading to incorrect post-operation checks,Insufficient proof alleging the flaw as it's in #75,Unsatisfactory,,72
validation-15,Lack of input validation on the _convertWrappedEthToStETH function in the ZapRouterBase contract,Low QA,Unsatisfactory,,58
validation-151,Unchecked Return Value in LeverageMacroBase._doSwap,Check well in place,Unsatisfactory,,41
validation-153,Fee calculation in `LeverageZapRouterBase` may result in excessive fees and inaccurate CDP debt,Intended design,Unsatisfactory,,78
validation-154,A user could sandwich the oracle update by opening and closing `cdp` to gain profits,Insufficient proof alleging the exploit. Common issue in DeFi after all,Unsatisfactory,,27
validation-155,Mistakenly-sent stETH/eBTC could be used by the next user to openCdp/closeCdp,Incorrect perceptions. It will be atomically prevented.,Unsatisfactory,,82
validation-158,Lack of Token Validation in `_getSwapOperations` Function Can Lead to Incorrect Token Handling,Low QA on input mistake,Unsatisfactory,,42
validation-159,Missing the return value check when sending native ETH to Lido can result in mis-functioning of _adjustCDP and user's fund lost,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,140
validation-160,Two user touchpoint routers not sharing a global reentrancy guard opens the door for cross-contract reentrancy attack,Inadequate actual scenario entailed,Unsatisfactory,,31
validation-161,Protocol supports stETH but doesn't consider its unique transfer logic which would lead to not only a DOS of the depositing/withdrawal channel for this collateral token but also a flaw in multiple other core protocol logic,Known readme issue,Unsatisfactory,,47
validation-163,`try/catch` doesn't catch every error which may lead to silent failure,Permit leak,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-zap-router/src/ZapRouterBase.sol#L115-L133,58
validation-166,The function borrowerOperations.adjustCdpWithColl in the smart contract incorrectly assess a fee even when the debt does not increase,Insufficient proof alleging the flaw. LiquidatorReward has earlier been factored in EbtcLeverageZapRouter._openCdp() after all,Unsatisfactory,,34
validation-167,[H-1] User can open CDP position passing **unallowed** tokens in `TradeData.exchangeData`,Insufficient proof alleging the flaw. Concrete coded POC is needed,Unsatisfactory,,191
validation-168,Persistent PermitApprovals can get overridden when interacting with CDPs.,Permit leak. Same root cause as in #54,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-zap-router/src/ZapRouterBase.sol#L115-L133,113
validation-169,A large amount of Ether can be sent to the user who closes a CDP in 'EbtcLeverageZapRouter' contract,Incorrect perceptions. It will be atomically prevented.,Unsatisfactory,,59
validation-17,Unchecked return value on call in the _convertRawEthToStETH function on the ZapRouterBase contract,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,98
validation-170,[H-1] `PostCheckParams` do not validate collateral correctly.,Reverse condition wrongly used,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-zap-router/src/LeverageZapRouterBase.sol#L269,135
validation-171,Position manager can make calls on behalf of a user despite an expired deadline,Permit leak,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-zap-router/src/ZapRouterBase.sol#L115-L133,183
validation-172,Unreliable Permit Handling Due to Phantom Function Vulnerability,Permit leak,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-zap-router/src/ZapRouterBase.sol#L115-L133,48
validation-173,Lack of Slippage Protection in Trading Operations,It's implemented in LeverageZapRouterBase::_getSwapOperations,Unsatisfactory,,47
validation-175,Unsafe downcasting in _getOwnerAddress function can be exploited to cause DoS,Incorrect assumptions. Logic working as intended,Unsatisfactory,,43
validation-176,Lack of Slippage protection in `LeverageZapRouterBase::_getSwapOperations` function could potentially force user to pay more than what they are expecting.,The more the merrier,Unsatisfactory,,34
validation-177,"exchangeData can be maliciously used for arbitraty calls, even when DEXes are hardcoded and trusted like 1inch and 0x",Inadequate coded POC alleging the exploit,Unsatisfactory,,126
validation-178,Replay Attacks possible on _permitPositionManagerApproval function,Invalid proof when compared to #54,Unsatisfactory,,58
validation-179,ATTACKER CAN WEAPONISE WRONG VALIDATION IN requireSingularMarginChange() function TO CLEAR HIS DEBT WITHOUT REPAYMENT USING adjustCdp function AND HENCE INCREASE HIS ICR TO BE ABLE TO BORROW MORE,Devoid of coded POC alleging flaw on the intended design,Unsatisfactory,,138
validation-181,_doSwapChecks should use >= rather than > when checking balance,Low inconsequential,Unsatisfactory,,46
validation-184,Unchecked Return Value in Low-Level `call` Function,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,47
validation-185,Potential False Positive Deposit Detection Due to stETH Rebasing,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,55
validation-186,`stETHMarginAmount` can be lower than the loan amount,Insufficient proof alleging a flaw,Unsatisfactory,,73
validation-187,Inaccurate stETH Deposit Calculation Due to Rebasing in _transferInitialStETHFromCaller,Incorrect perceptions. It's rebaing but NOT FOT,Unsatisfactory,,47
validation-188,Lack of Slippage Protections for Asset Conversions in ZapRouterBase,It's implemented in LeverageZapRouterBase::_getSwapOperations,Unsatisfactory,,51
validation-19,"Overcharging users, even if unintentional, can damage the protocol's reputation and erode user trust.",Intended design,Unsatisfactory,,81
validation-21,Closing/Adjusting CDPs are done with a minute leakage in accounting and  funds,Known readme issue,Unsatisfactory,,84
validation-22,Users are consistently receiving less eBTC than they should for the amount of debt they're incurring.,Intended design,Unsatisfactory,,126
validation-23,Incorrect Parameter Handling in _adjustCdpOperation function within LeverageZapRouterBase contract,Insufficient proof alleging the exploit. Low QA on user input mistake anyway,Unsatisfactory,,102
validation-24,Incorrect Parameter Handling in _openCdpOperation function within LeverageZapRouterBase contract,Insufficient proof alleging the exploit. Low QA on user input mistake anyway,Unsatisfactory,,107
validation-25,Incorrect Parameter Handling in _closeCdpOperation function within LeverageZapRouterBase contract,Insufficient proof alleging the exploit. Low QA on user input mistake anyway,Unsatisfactory,,95
validation-26,Missing Error Handling in sweepToCaller function within LeverageMacroBase contract,Low QA. Insufficient proof,Unsatisfactory,,60
validation-27,Insufficient Input Validation in sweepToken function within LeverageMacroBase contract,Low QA. Insufficient proof,Unsatisfactory,,42
validation-28,Incorrect Data Decoding in decodeFLData function within LeverageMacroBase contract,Insufficient proof alleging the flaw,Unsatisfactory,,52
validation-29,Add Zero Address Check and Optional Event Emission in `_doSwapChecks`,Low QA,Unsatisfactory,,60
validation-3,Unchecked return value of low-level `call()`/`delegatecall()`,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,28
validation-30, Vulnerability in `_doSwap` Function of `LeverageMacroBase` Contract Enables Unauthorized Token Transfers,Devoid of coded POC showcasing an actual scenario,Unsatisfactory,,74
validation-31,Discrepancy Between Documentation and Implementation in closeCdp Function Regarding Collateral Return Type,Low QA on comment mismatch,Unsatisfactory,,66
validation-32,Misleading Comment and Incorrect Logic in adjustCdpWithWrappedEth Function Handling WETH vs WstETH,Low QA if ever mismatch,Unsatisfactory,,53
validation-33,Any Ether sent beyond the specified _ethMarginBalance is lost.,Incorrect assumptions. Higher margin equals higher CR,Unsatisfactory,,101
validation-34,"doOperation Function Always Reverts, Rendering It Unusable in LeverageZapRouterBase.sol",Intended design. The internal function from macro will be used,Unsatisfactory,,65
validation-35,Private _sweepEbtc() Function Transfers Balance to msg.sender Without Proper Access Control,Access control not applicable on a private function,Unsatisfactory,,83
validation-36,Missing Success Check in _openCdpForCallback Leads to Potential Fee Transfer Without CDP Creation,SafeTransfer will revert if need be,Unsatisfactory,,94
validation-37,Lack of Minimum Deposit Check in _depositRawEthIntoLido May Lead to Loss of Funds,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,35
validation-39,Reentrancy vulnerability,Inadequate actual scenario entailed,Unsatisfactory,,98
validation-40,CDP operations can be performed even when the permit is expired,Permit leak,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-zap-router/src/ZapRouterBase.sol#L115-L133,86
validation-42,User can send eth to router,Commonly known issue,Unsatisfactory,,43
validation-43,The leverage router doesn't support users to pay eBTC debt back with their own assets,Intended leverage design,Unsatisfactory,,31
validation-44,Owner can't change `zapFeeBPS` and `zapFeeReceiver`,Low QA on owner controlled immutable variables,Unsatisfactory,,49
validation-45,`flashLoan` function's result is not checked.,Insufficient proof alleging the flaw,Unsatisfactory,,45
validation-46,Relying on the difference in the contract's stETH balance before and after the `_closeCdpOperation` could potentially allow excess withdrawal of `stETH`,Incorrect perceptions. It will be atomically prevented.,Unsatisfactory,,64
validation-49,Incorrect comparison logic in `_doCheckValueType` leading to incorrect post-operation checks,Insufficient proof alleging the flaw as it's in #75,Unsatisfactory,,61
validation-50,Incorrect comparison logic in `_doCheckValueType` leading to incorrect post-operation checks,Insufficient proof alleging the flaw as it's in #75,Unsatisfactory,,61
validation-52,Potential manipulation of CDP queue position through unvalidated upperHint and lowerHint parameters,Devoid of coded POC showcasing an actual scenario,Unsatisfactory,,73
validation-54,ZapRouterBase._permitPositionManagerApproval() will bypass an expired permit.,Permit leak,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-zap-router/src/ZapRouterBase.sol#L115-L133,143
validation-55,The conversion path from ETH to stETH can be suboptimal in `ZapRouterBase` and cause loss of funds when depositing especially in a a 1:1 ratio,Intended design of having coll denominated in stETH,Unsatisfactory,,86
validation-56,"LeverageZapRouterBase.sol :: _adjustCdpOperation() is using the amount of stETH instead of ETH, resulting in an incorrect calculation of the shares needed to modify the collateral.",Intended design of having coll denominated in stETH,Unsatisfactory,,130
validation-58,Front-Running in Position Manager Approval,Permit leak,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-zap-router/src/ZapRouterBase.sol#L115-L133,82
validation-59,Position Manager Approval Remains Active After Operations,No success verification needed for merely updating teh mapping positionManagers[_borrower][_positionManager] = _approval,Unsatisfactory,,47
validation-60,"Fees can be bypassed when sweeping tokens, leading to a loss of protocol revenue",Intended design,Unsatisfactory,,86
validation-61,Potential for token dust accumulation violates contract invariant,Readme: ZapRouter contract should not have any tokens after each operation (aside from rounding),Unsatisfactory,,114
validation-62,Inconsistent Token Sweeping May Leave Residual Tokens in ZapRouter,Already commented sweepStEth happens outside of this call,Unsatisfactory,,73
validation-63,Inconsistent Fee Assessment in CDP Operations,Intended design,Unsatisfactory,,90
validation-64,Reentrancy Attack in `flashLoan` Function,Inadequate actual scenario entailed,Unsatisfactory,,129
validation-66,Retention of non-stETH tokens in ZapRouter contract,Insufficient proof alleging the flaw,Unsatisfactory,,63
validation-67,The function _openCdp does not use _stEthMarginAmount causing the token transfer from user is useless,Insufficient proof alleging a flaw,Unsatisfactory,,108
validation-69,Fee calculation in `LeverageZapRouterBase` could lead to excessive fees being charged and inaccurate CDP debt,Intended design,Unsatisfactory,,58
validation-7,Precision Loss in stETH to wstETH Conversion Leading to Fund Loss,Known readme issue,Unsatisfactory,,71
validation-71,Excessive Approval Amount in LeverageZapRouterBase Contract,Intended design,Unsatisfactory,,57
validation-72,Fixed liquidation reward will cause bad debt,Intended design. Insufficient proof alleging the fixed reward flaw,Unsatisfactory,,39
validation-73,"An invariant is broken which relates to Position Manager Permit not being revoked after operations, allowing unauthorized access to user CDPs",borrowerOperations.renouncePositionManagerApproval(msg.sender) is invoked in EbtcLeverageZapRouter.sol,Unsatisfactory,,79
validation-74,_doSwapChecks might fail to validate the expectedMinOut constraint.,Mitigation reduces likelihood of revert,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-protocol/packages/contracts/contracts/LeverageMacroBase.sol#L485-L497,702
validation-75,Wrong slippage control for the collateral shares for a cdp due to logical error in LeverageZapRouterBase._getPostCheckParams.,Reverse condition wrongly used. Seems right with detailed coded POC,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-zap-router/src/LeverageZapRouterBase.sol#L269,739
validation-76,`Operator.gte` is used for both increase or decrease CDP adjustments,Reverse condition wrongly used. Seems right with detailed coded POC,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-zap-router/src/LeverageZapRouterBase.sol#L269,71
validation-77,Leverage router cannot perform debt decrease and collateral increase,Intended leverage design,Unsatisfactory,,78
validation-78,Unexpected Ether Balance (SWC-132) in the _convertWrappedEthToStETH function of the ZapRouterBase contract affecting the EbtcLeverageZapRouter contract,Low QA reported by the Analyzer,Unsatisfactory,,154
validation-79,Weak Sources of Randomness from Chain Attributes in EbtcLeverageZapRouter contract,Low QA. Incorrect perceptions,Unsatisfactory,,128
validation-80,Block Values Used as a Proxy for Time in EbtcLeverageZapRouter contract,Incorrect perceptions,Unsatisfactory,,96
validation-81,Unprotected Ether Withdrawal Found (transfer/send) in the ZapRouterBase contract _transferInitialStETHFromCaller function affecting the EbtcLeverageZapRouter contract,Low QA. Intended design,Unsatisfactory,,217
validation-82, an absence of a repayment verification ,Insufficient proof alleging the flaw,Unsatisfactory,,41
validation-83,Low-level call return value is not checked ,_submit(0) will be called via the fallback function in Lido and revert if need be,Unsatisfactory,,28
validation-84,Weak sources of randomness from chain attributes in LeverageMacroBase contract,Low QA. Incorrect perceptions,Unsatisfactory,,225
validation-85,Block values used as a proxy for time found in LeverageMacroBase contract,Incorrect perceptions,Unsatisfactory,,146
validation-87,Bad Actor can Completely Sweep Off StEth in Contract,It's msg.sender linked,Unsatisfactory,,103
validation-88,Sunnyboy95 - Security Enhancements and Best Practices Implementation for `EbtcLeverageZapRouter` Contract,Sporadically unstructured proofs entailed,Unsatisfactory,,284
validation-89,Users Will Be Able to open CDPs with insufficient collateral due to Incorrect Collateral Value Handling in CDP Opening Process,That's the leveraged amount needed,Unsatisfactory,,47
validation-9,Lack of Explanation on Emitting Events for Revert Reasons on the EbtcLeverageZapRouter contract,Low QA,Unsatisfactory,,261
validation-90,Potential Collateral Requirement Oversight in CDP Adjustment Functions,Could be illiquid,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/main/ebtc-zap-router/src/EbtcLeverageZapRouter.sol#L403-L467,25
validation-91,Incorrect conversion to eth to stEth. ,Intended design of having coll denominated in stETH,Unsatisfactory,,54
validation-92,Not checking return value on flashLoan contract,Insufficient proof alleging the flaw,Unsatisfactory,,60
validation-93,LeverageMacroBase::_doSwapChecks Misleading Balance Calculation Compromises Slippage Protection,Insufficient proof opposing coded POC of #74,Unsatisfactory,,59
validation-95,Eth could be stuck in the contract,Low QA on user input mistake,Unsatisfactory,,54
validation-96,Incorrect parameters used in  slippage checks while openingCdp.,Insufficient proof alleging the flaw. LiquidatorReward has earlier been factored in EbtcLeverageZapRouter._openCdp() after all,Unsatisfactory,,31
validation-97,Potential Misinterpretation of Liquidator Rewards in Smart Contract Logic,Incorrect assumptions and perceptions,Unsatisfactory,,44
validation-98,Wrong `Operator` used for `expectedCollateral`,Reverse condition wrongly used. Seems right with detailed coded POC,Satisfactory,https://github.com/code-423n4/2024-06-badger/blob/9173558ee1ac8a78a7ae0a39b97b50ff0dd9e0f8/ebtc-zap-router/src/LeverageZapRouterBase.sol#L269,51
validation-99,Incorrect Parameter Order in Struct Initialization Leading to Financial Miscalculations,Insufficient proof. Order doesn't matter in named parameters,Unsatisfactory,,46